openapi: 3.0.2
info:
  title: Weddingnyong
  description: API Spec for Weddingnyong
  version: '1.0'
  contact:
    name: Didi Prasetyo
    email: didiprasetyo360@gmail.com
    url: https://prasetyodidi.github.io/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.server.test/v1
tags:
  - name: Invitation
    description: Operation about invitation
  - name: Guest
    description: Operation about guest
  - name: Guest Actions
    description: Operation for guest ability
  - name: Design
    description: Operation about design
  - name: Audio
    description: Operation about audio
  - name: Price
    description: Operation about price
  - name: Testimony
    description: Operation about testimony
  - name: Auth
    description: Operation about authentication
components:
  schemas:
    user:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
      required:
        - id
        - name
        - email
    successLogin:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
    register:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/user'
    invitation:
      type: object
      properties:
        id:
          type: string
        slug:
          type: string
        brideName:
          type: string
        albums:
          type: array
          items:
            type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/comment'
    comment:
      type: object
      properties:
        name:
          type: string
        confirmation:
          type: string
        message:
          type: string
        commentAt:
          type: string
        avatarUrl:
          type: string
    itemError:
      type: object
      properties:
        name:
          type: string
        messages:
          type: array
          items:
            type: string
    groom:
      type: object
      properties:
        name:
          type: string
        fullName:
          type: string
        info:
          type: string
        instagram:
          type: string
    event:
      type: object
      properties:
        date:
          type: string
        time_start:
          type: string
        time_end:
          type: string
        address:
          type: string
        map:
          type: string
    design:
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
  parameters:
    invitationId:
      name: invitationId
      in: path
      required: true
      description: Invitation id
      schema:
        type: string
        example: randomstring
    guestId:
      name: guestId
      in: path
      required: true
      description: Guest id
      schema:
        type: string
        example: randomstring
    designId:
      name: designId
      in: path
      required: true
      description: Guest id
      schema:
        type: string
        example: randomGuestId
    testimonyId:
      name: testimonyId
      in: path
      required: true
      description: Testimony id
      schema:
        type: string
        example: randomTestimonyId
    audioId:
      name: audioId
      in: path
      required: true
      description: Audio id
      schema:
        type: string
        example: randoAudioId
    priceId:
      name: priceId
      in: path
      required: true
      description: Price id
      schema:
        type: string
        example: randomPriceId
  securitySchemes:
    JWTBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    TokenResetPassword:
      type: apiKey
      name: api_key
      in: header
  responses:
    invitationNotFound:
      description: Invitation not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
          example:
            status: 404
            message: Invitation not found
    guestNotFound:
      description: Guest not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
          example:
            status: 404
            message: Guest not found
    userUnauthorized:
      description: User Unautorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
          example:
            status: 401
            message: You are not authorized
paths:
  /invitation:
    get:
      summary: get required data for create invitation
      tags:
        - Invitation
      responses:
        200:
          description: success get required data for create invitation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      prices:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            price:
                              type: integer
                      designs:
                        type: array
                        items:
                          $ref: "#/components/schemas/design"
      security:
        - JWTBearer: []
    post:
      summary: store invitation
      tags:
        - Invitation
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                design:
                  type: string
                packageType:
                  type: string
                audio:
                  type: string
                timeZone:
                  type: string
                bride:
                  $ref: "#/components/schemas/groom"
                groom:
                  $ref: "#/components/schemas/groom"
                wedding:
                  $ref: "#/components/schemas/event"
                reception:
                  $ref: "#/components/schemas/event"
                albums:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  invitation:
                    type: object
                    properties:
                      status:
                        type: integer
                      message:
                        type: string
                      data:
                        type: object
                        properties:
                          invitationId:
                            type: string
                          designId:
                            type: string
                          packageType:
                            type: string
  /invitations:
    get:
      tags:
        - Invitation
      parameters: []
      summary: get all invitation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      invitations:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            url:
                              type: string
  /invitation/{invitationId}:
    parameters:
      - $ref: '#/components/parameters/invitationId'
    get:
      summary: show invitation
      tags:
        - Invitation
      description: show invitation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/invitation'
        '401':
          $ref: '#/components/responses/userUnauthorized'
        '404':
          $ref: '#/components/responses/invitationNotFound'
    put:
      tags:
        - Invitation
      description: update invitation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  groom:
                    $ref: "#/components/schemas/groom"
                  bride:
                    $ref: "#/components/schemas/groom"
                  design:
                    $ref: "#/components/schemas/design"
                  packageType:
                    type: string
        '401':
          $ref: '#/components/responses/userUnauthorized'
        '404':
          $ref: '#/components/responses/invitationNotFound'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Invitation
      description: Delete invitation
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
              example:
                summary: delete success
                value:
                  status: 200
                  message: invitation has been deleted
        '401':
          $ref: '#/components/responses/userUnauthorized'
        '404':
          $ref: '#/components/responses/invitationNotFound'
      security:
        - JWTBearer: []
  /guests:
    get:
      tags:
        - Guest
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        phoneNumber:
                          type: string
                        checkinStatus:
                          type: string
                          nullable: true
                        qrUrl:
                          type: string
              example:
                status: 200
                message: success get list of guests
                data: [
                  {name: "Ucup surucup", phoneNumber: 08123123111, checkinStatus: null, qrUrl: "https://randomurlqrl"},
                  {name: "Otong", phoneNumber: 08123123222, checkinStatus: "27-12-2022, 13:20", qrUrl: "https://randomurlqrl"},
                  {name: "Mario", phoneNumber: 08123123333, checkinStatus:  "27-12-2022, 14:20", qrUrl: "https://randomurlqrl"},
                ]
      security:
        - JWTBearer: []
    post:
      tags:
        - Guest
      responses:
        '200':
          description: OK
      security:
        - JWTBearer: []
  /guest/{guestId}:
    parameters:
      - $ref: '#/components/parameters/guestId'
    get:
      tags:
        - Guest
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      statusAttendance:
                        type: string
                      qrUrl:
                        type: string
        401:
          $ref: '#/components/responses/userUnauthorized'
        404:
          $ref: '#/components/responses/guestNotFound'
      security:
        - JWTBearer: []
    put:
      tags:
        - Guest
      responses:
        '401':
          $ref: '#/components/responses/userUnauthorized'
        '404':
          $ref: '#/components/responses/guestNotFound'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Guest
      responses:
        '401':
          $ref: '#/components/responses/userUnauthorized'
        '404':
          $ref: '#/components/responses/guestNotFound'
      security:
        - JWTBearer: []
  /guest/{guestId}/checkin:
    parameters:
      - $ref: "#/components/parameters/guestId"
    get:
      tags:
        - Guest Actions
      responses:
        200:
          description: OK
  /guest/{guestId}/attendance:
    parameters:
      - $ref: "#/components/parameters/guestId"
    put:
      tags:
        - Guest Actions
      responses:
        200:
          description: OK
  /guest/{guestId}/upload-avatar:
    parameters:
      - $ref: "#/components/parameters/guestId"
    put:
      tags:
        - Guest Actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                avatarUrl:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
  /designs:
    get:
      tags:
        - Design
      responses:
        200:
          description: OK
  /design/{designId}:
    parameters:
      - $ref: "#/components/parameters/designId"
    get:
      tags:
        - Design
      responses:
        200:
          description: OK
    put:
      tags:
        - Design
      responses:
        200:
          description: OK
    delete:
      tags:
        - Design
      responses:
        200:
          description: OK
  /audios:
    get:
      tags:
        - Audio
      responses:
        200:
          description: OK
  /audio/{audioId}:
    parameters:
      - $ref: "#/components/parameters/audioId"
    get:
      tags:
        - Audio
      responses:
        200:
          description: OK
    put:
      tags:
        - Audio
      responses:
        200:
          description: OK
    delete:
      tags:
        - Audio
      responses:
        200:
          description: OK
  /prices:
    get:
      tags:
        - Price
      responses:
        200:
          description: OK
  /price/{priceId}:
    parameters:
      - $ref: "#/components/parameters/priceId"
    get:
      tags:
        - Price
      responses:
        200:
          description: OK
    put:
      tags:
        - Price
      responses:
        200:
          description: OK
    delete:
      tags:
        - Price
      responses:
        200:
          description: OK
  /testimonies:
    get:
      tags:
        - Testimony
      responses:
        200:
          description: OK
  /testimony/{testimonyId}:
    parameters:
      - $ref: "#/components/parameters/testimonyId"
    get:
      tags:
        - Testimony
      responses:
        200:
          description: OK
    put:
      tags:
        - Testimony
      responses:
        200:
          description: OK
    delete:
      tags:
        - Testimony
      responses:
        200:
          description: OK
  /login:
    post:
      tags:
        - Auth
      description: login user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                  minLength: 6
              required:
                - id
            examples:
              validData:
                description: user data is valid
                value:
                  email: didiprasetyo360@gmail.com
                  password: password
              invalidFormatEmail:
                description: input email invalid
                value:
                  email: didiprasetyo360#gmail.com
                  password: password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successLogin'
              examples:
                validData:
                  description: user data is valid
                  value:
                    status: 200
                    message: success login
                    data:
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: user have an error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/itemError'
              examples:
                emailOrPasswordIncorrect:
                  description: email or password is incorrect
                  value:
                    status: 400
                    message: email or password is incorrect
                    data: []
  /register:
    post:
      tags:
        - Auth
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
            examples:
              validData:
                description: user data is valid
                value:
                  id: 0f24a1c2-4197-4d6a-b109-df4fc4c7d75c
                  name: Didi Prasetyo
                  email: didiprasetyo360@gmail.com
                  password: password
              passwordTooShort:
                description: user password is too short
                value:
                  id: 8bdf16eb-aa2a-4a06-96e6-fb05a8ebf9b4
                  name: Adrian Aji
                  email: adrianaji1945@gmail.com
                  password: pass
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/register'
              examples:
                validData:
                  description: valid data
                  value:
                    status: 200
                    message: OK
                    data:
                      id: 0f24a1c2-4197-4d6a-b109-df4fc4c7d75c
                      name: Didi Prasetyo
                      email: didiprasetyo360@gmail.com
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/itemError'
              examples:
                errorValidation:
                  description: email invalid format, password have too short length and have no capital letter
                  value:
                    status: 400
                    message: You have an error in input values
                    data:
                      - name: email
                        messages:
                          - invalid format
                      - name: password
                        messages:
                          - password too short
                          - have no capital letter
  /logout:
    post:
      tags:
        - Auth
      description: user logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
              examples:
                success:
                  description: success logout
                  value:
                    status: 200
                    message: success logout
        '400':
          description: client error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
              examples:
                failed:
                  description: failed logout
                  value:
                    status: 400
                    message: token invalid
      security:
        - JWTBearer: []
  /reset-password:
    post:
      tags:
        - Auth
      description: user request reset password
      parameters: []
      responses:
        '200':
          description: OK
  /verify-email/{id}/{hash}:
    parameters:
      - name: id
        in: path
        required: true
        description: user id
        schema:
          type: string
          example: randomstring
      - name: hash
        in: path
        required: true
        description: hashing data
        schema:
          type: string
          example: randomstring
    get:
      tags:
        - Auth
      description: user verify email
      parameters: []
      responses:
        '200':
          description: OK
  /resend-email-verification:
    post:
      tags:
        - Auth
      description: user request email verification again
      parameters: []
      responses:
        '200':
          description: OK
  /password:
    put:
      tags:
        - Auth
      description: user update password
      parameters: []
      responses:
        '200':
          description: OK
      security:
        - TokenResetPassword: []
